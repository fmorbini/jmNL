Network low-confidence {
	#topic: basic
	#entrance condition: current NLU speech act = internal.low-confidence
	system: statement.not-understand
	#goal: simple
}
Network ignored {
	#topic: basic
	#entrance condition: current NLU speech act = ignored
	system: statement.ignore
	#goal: simple
}
Network loop {
	#topic: basic
	#entrance condition: current NLU speech act = loop
	system: statement.loop
	#goal: simple
}
Network empty {
	#topic: basic
	#entrance condition: current NLU speech act = empty
	
	DO
	#goal: simple
}

Network greetings {
	#topic: greeting
	#entrance condition: current NLU speech act = greeting.hello
	system: greeting.hello
	#goal: simple
}

final Network exitSystem {
	#topic: greeting
	#entrance condition: current NLU speech act = greeting.bye
	#entrance condition: system initiative
	#condition: state=='exit'

	system: greeting.bye
	#goal: exitGoal
}

Network startup {
	#topic: startup
	#entrance condition: current NLU speech act = login
	
	system: greeting.hello
	system: greeting.welcome
	#action: state='login'
	#goal: simple
}
Network wakeup {
	#topic: startup
	#entrance condition: system initiative
	#condition: and(state=='login',or(!alreadyAsked,timeSinceLastAction>12))
	
	system: question.what.user-wants
	#action: alreadyAsked=true
	#goal: simple
}

Network qado {
	#topic: qa
	#entrance condition: current NLU speech act = question.what.do
	
	system: answer.what.user-does
	#goal: simple
}
Network qamake {
	#topic: qa
	#entrance condition: current NLU speech act = question.what.you-make
	
	system: answer.what.make
	#goal: simple
}
Network qatype {
	#topic: qa
	#entrance condition: current NLU speech act = question.cake.type
	
	system: answer.what.make
	#goal: simple
}
Network qaflavor {
	#topic: qa
	#entrance condition: current NLU speech act = question.cake.flavor
	#entrance condition: current NLU speech act = question.what.you-make
	#condition: isCurrentTopic('set.flavor')
	#entrance condition: system initiative
	#condition: clarifyFlavors
	
	{
		if (or(!known(type),type == 'sponge'))
		{
			system: answer.cake.flavor.sponge
		}
		if (or(!known(type),type == 'cheese'))
		{
			system: answer.cake.flavor.cheese
		}
	}
	#action: clarifyFlavors=false
	#goal: quick
}

Network cake {
	#topic: set.start
	#entrance condition: current NLU speech act = statement.cake
	#condition: state=='login'
	
	if (false)
	{
		DO
		#entrance condition: current NLU speech act = statement.cake.sponge
		#condition: state=='login'
		DO
		#action: type='sponge'
	}
	if (false)
	{
		DO
		#entrance condition: current NLU speech act = statement.cake.cheese
		#condition: state=='login'
		DO
		#action: type='cheese'
	}
	
	system: acknowledgement
	#action: state='start'
	#goal: simple
}

Network sugar {
	#topic: set.sugar
	#entrance condition: system initiative
	#condition: and(state=='start',!known(confirmX),!known(sugar))

	{	
		system: question.cavities
		{
			user: or(answer.yes,answer.dont-know)
			#action: confirmX=true
		}
		or
		{
			user: answer.no
			system: question.diabetic
			{
				user: or(answer.yes,answer.dont-know)
				#action: confirmX=true
			}
			or
			{
				user: answer.no
				#action: confirmX=false
			}
		}
	}
	#goal: simple
}

Network confirmXylitol {
	#topic: set.type
	#entrance condition: system initiative
	#condition: and(known(confirmX),!known(sugar))

	{
		if (confirmX)
		{
			system: statement.cake.sugarless
			system: question.confirmation
			{
				user: answer.yes
				#action: sugar='x'
			}
			or
			{
				user: default
				#action: state='exit'
			}
		}
		else
		{
			DO
			#action: sugar='n'
		}
	}
	DO
	#action: confirmX=false
	#goal: simple
}
	
Network caketype {
	#topic: set.type
	#entrance condition: system initiative
	#condition: and(state=='start',!known(type),known(sugar))
	
	#reentrance option: statement.back
	
	system: question.cake.type
	{
		{
			user: statement.cake.sponge
			#action: type='sponge'
		}
		OR
		{
			user: statement.cake.cheese
			#action: type='cheese'
		}
	}
	#goal: simple
}

Network flavorSponge {
	#topic: set.flavor
	#entrance condition: system initiative
	#condition: and(state=='start',type=='sponge',known(sugar))
	
	#reentrance option: statement.back
	
	system: question.cake.flavor
	{
		{
			user: statement.flavor.chocolate
			#action: flavor='chocolate'
		}
		OR
		{
			user: statement.flavor.amaretto
			#action: flavor='amaretto'
		}
		OR
		{
			user: statement.flavor.lemon
			system: apology.flavor
			#action: clarifyFlavors=true
			#action: swapout
		}
	}
	DO
	#action: state='done'
	#goal: simple
}
Network flavorCheese {
	#topic: set.flavor
	#entrance condition: system initiative
	#condition: and(state=='start',type=='cheese',known(sugar))
	
	#reentrance option: statement.back
	
	system: question.cake.flavor
	{
		{
			user: statement.flavor.chocolate
			#action: flavor='chocolate'
		}
		OR
		{
			user: statement.flavor.lemon
			#action: flavor='lemon'
		}
		OR
		{
			user: statement.flavor.amaretto
			system: apology.flavor
			#action: clarifyFlavors=true
			#action: swapout
		}
	}
	DO
	#action: state='done'
	#goal: simple
}

Network done {
	#topic: done
	#entrance condition: system initiative
	#condition: and(state=='done')

	{
		if (and(type=='sponge',flavor=='chocolate'))
			system: statement.cake.ready.chocolate.sponge
		if (and(type=='cheese',flavor=='chocolate'))
			system: statement.cake.ready.chocolate.cheese
		if (flavor=='lemon')
			system: statement.cake.ready.lemon
		if (flavor=='amaretto')
			system: statement.cake.ready.amaretto
	}

	#action: state='exit'
	#goal: simple
}
