options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Parser)
package edu.usc.ict.nl.nlg.lf.parser;

import java.util.ArrayList;
import java.util.List;
import edu.usc.ict.nl.nlg.lf.SyntaxBuilder;

/** Simple brace matcher. */
public class Parser {
	public List<SyntaxBuilder> makeArglist(SyntaxBuilder f) {
		if (f==null) return new ArrayList<SyntaxBuilder>();
		else {
			List<SyntaxBuilder> args=new ArrayList<SyntaxBuilder>();
			args.add(f);
			return args;
		}
	}
	public List<SyntaxBuilder> makeArglist() {
		return new ArrayList<SyntaxBuilder>();
	}
	public List<SyntaxBuilder> makeArglist(SyntaxBuilder f,List<SyntaxBuilder> args2) {
		if (f==null) return null;
		else {
			List<SyntaxBuilder> args=new ArrayList<SyntaxBuilder>();
			args.add(f);
			if (args!=null) args.addAll(args2);
			return args;
		}
	}
	public SyntaxBuilder makeFunction(Token f,List<SyntaxBuilder> args) throws ParseException {
	       	String fname=f.image;
	       	try {
        		SyntaxBuilder rr=new SyntaxBuilder(fname,args);
        		return rr;
			} catch (Exception e) {
				e.printStackTrace();
				throw new ParseException("error creating function starting at line: "+f.beginLine+" column: "+f.beginColumn);
			}
	}
}

PARSER_END(Parser)

<DEFAULT> SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

<DEFAULT> TOKEN :
{
  <LB: "(">
| <RB: ")">
| <AND: "and">
| <NEG: "negated">
| <CM: ",">
| <ID: (~["'","\"","\t","\n","\r",",","(",")","{","}","=",">","<"])+>
}

/** Root production. */
SyntaxBuilder syntax() :{
	Token p=null;
	List<SyntaxBuilder> args=null;
}
{
	p=<ID>(args=arguments())? {return makeFunction(p,args);}
	|
	p=<NEG>(args=arguments())? {return makeFunction(p,args);}
}
List<SyntaxBuilder> argumentsBody() :{
	SyntaxBuilder wff;
	List<SyntaxBuilder> args=null;
}
{
	(wff=syntax()(<CM>args=argumentsBody())?) {return (args!=null)?makeArglist(wff,args):makeArglist(wff);}
}
List<SyntaxBuilder> arguments() :{
	List<SyntaxBuilder> args=null;
}
{
	<LB>(args=argumentsBody())?<RB> {return (args!=null)?args:null;}
}


